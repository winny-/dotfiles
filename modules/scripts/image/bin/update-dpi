#!/usr/bin/env racket
#|

How to install deps:

- Install the toml lib from gregh.  Git clone then raco pkg install --name toml
  in its checkout.
- raco pkg install --auto dirname basedir

|#
#lang racket

(require toml
         basedir
         dirname
         racket/pretty
         racket/hash
         racket/os)

(current-basedir-program-name "update-dpi")

(define (hostname/symbol)
  (string->symbol (regexp-replace #px"\\..+" (gethostname) "")))

(define (command incantation)
  (match-define (list out in pid err proc)
    (process incantation))
  out)

(define (compute-dpi state)
  ;; Whatever I do racket insists on searching with anchor=beginning of file so
  ;; give up searching for the beginning of line.
  (match (regexp-match #px"  resolution:[[:blank:]]+(\\d+)x(\\d+)" (command "xdpyinfo") 0 #f #f #"\n")
    [(list _ x _ ...)
     (+ 10 (string->number (bytes->string/utf-8 x)))]))

(define (compute-qt-scale-factor state)
  ;; Is there an easier way to do this without having to scale and deal with
  ;; that mess?
  (string->number (~r (- (/ (hash-ref state DPI) 96) 0.03) #:precision 2)))

(define (compute-cursor-size state)
  16)

(define (main settings)
  (define t (with-handlers ([exn:fail:filesystem:errno? (const #f)])
              (parse-toml (with-input-from-file
                            (car (list-config-files "config.toml" #:only-existing? #f))
                            port->string))))
  (define h
    (hash-union (hash-ref t DEFAULT (const (hash)))
                (hash-ref (hash-ref t HOST (const (hash)))
                          (hostname/symbol)
                          (const (hash)))
                settings
                #:combine (Î» (a b) b)))
  (define resolved
    (for/fold ([h (hash
                   DPI (hash-ref h DPI (const #f))
                   QT-SCALE-FACTOR (hash-ref h QT-SCALE-FACTOR (const #f))
                   CURSOR-SIZE (hash-ref h CURSOR-SIZE (const #f)))])
              ([step (list (cons DPI compute-dpi)
                           (cons QT-SCALE-FACTOR compute-qt-scale-factor)
                           (cons CURSOR-SIZE compute-cursor-size))])
      (match step
        [(cons sym proc)
         (match (hash-ref h sym (const #f))
           [#f (hash-set h sym (proc h))]
           [v h])])))
  (when (*dry-run*)
    (pretty-print resolved)
    (exit 0))

  ;; Cursor
  (command (format "gsettings set org.gnome.desktop.interface cursor-size ~a"
                   (hash-ref resolved CURSOR-SIZE)))
  (command (format "xfconf-query --channel xsettings --property /Gtk/CursorThemeSize --set ~a" (hash-ref resolved CURSOR-SIZE)))

  (define p (car (list-cache-files "dpi.Xresources" #:only-existing? #f)))
  (make-directory* (dirname p))
  (with-output-to-file p
    (thunk
     (displayln
      (format #<<END
! This file is auto-generated by update-dpi.rkt!
! Do not edit!
Xft.dpi: ~a
*dpi: ~a
Xcursor.size: ~a
END
              (hash-ref resolved DPI)
              (hash-ref resolved DPI)
              (hash-ref resolved CURSOR-SIZE))))
    #:exists 'truncate)

  (command (format "xrdb -merge ~a" (path->string p)))

  (printf "export QT_SCALE_FACTOR=~a\n"
          (hash-ref resolved QT-SCALE-FACTOR)))

(define QT-SCALE-FACTOR 'qt_scale_factor)
(define DPI 'dpi)
(define CURSOR-SIZE 'cursor_size)
(define DEFAULT 'default)
(define HOST 'host)

(define *dry-run* (make-parameter #f))

(module+ main
  (define h (make-hash))
  (command-line
   #:once-each
   (("-d" "--dpi")
    dpi
    "Set the DPI"
    (define v (string->number dpi))
    (unless (number? v)
      (raise-argument-error '--dpi "Invalid DPI setting." v))
    (hash-set! h DPI v))
   (("-q" "--qt-scale-factor")
    qt-scale-factor
    "Set the QT_SCALE_FACTOR environment"
    (define v (string->number qt-scale-factor))
    (unless (number? v)
      (raise-argument-error '--qt-scale-factor "Invalid QT_SCALE_FACTOR setting." v))
    (hash-set! h QT-SCALE-FACTOR v))
   (("-c" "--cursor-size")
    cursor-size
    "Set the cursor size"
    (define v (string->number cursor-size))
    (unless (number? v)
      (raise-argument-error '--cursor-size "Invalid cursor size." v))
    (hash-set! h CURSOR-SIZE v))
   (("-n" "--dry-run")
    "Do not set anything, just print computed settings."
    (*dry-run* #t))
   #:args ()
   (main h)))
