#!/usr/bin/env bash

set -eu -o pipefail

# XXX https://stackoverflow.com/questions/37818335/mlock-a-program-from-a-wrapper
umask 077

pref_dir="$HOME/.config/wpass"
mkdir -p "$pref_dir"

: "${PASSWORD_STORE_DIR:=$HOME/.password-store}"
: "${PASSWORD_STORE_GPG_OPTS:=}"
: "${PAGER:=less}"

err() {
    printf "%s\n" "$*" >&2
    exit 1
}

terminalcheck() {
    local what
    if [[ $# -gt 1 ]]; then
        what="$*"
    else
        what='wpass'
    fi
    [[ -t 0 ]] || err "${what}: STDIN is not the terminal."
}

cmd=default
best_username=(login email)
copied=no

workdir="$(mktemp -t -d wpass.XXXXXXXXXXXXXXX)"

cleanup() {
    rm -rf "$workdir"
    if [[ $copied != no ]]; then
        echo | clip
    fi
}

trap cleanup EXIT

clip() {
    if [[ ${WAYLAND_DISPLAY+set} ]]; then
        wl-copy
    elif [[ ${DISPLAY+set} ]]; then
        read -r temp || temp=''
        printf '%s' "$temp" | xclip -in -selection primary
        printf '%s' "$temp" | xclip -in -selection clipboard
    elif [[ ${TMUX+set} ]]; then
        f="$workdir/tmux.buffer"
        cat > "$f"
        tmux load-buffer "$f"
    else
        err "Don't know how to set clipboard in environment!"
    fi
    copied=yes
}

entries() {
    command find "$PASSWORD_STORE_DIR" -type f -name '*.gpg' |
        sed -e 's/\.gpg$//' -e "s,^${PASSWORD_STORE_DIR}/,,"
}

find() {
    terminalcheck 'wpass find'
    if command -v fzf &>/dev/null; then
        entries |
            fzf --history="$pref_dir/fzf.history" \
                --scheme=history
    else
        echo 'No fzf found.  Falling back to dumb select.  Sorry for the long output!' >&2
        (
            IFS=$'\n'
            select choice in $(entries); do
                echo "$choice"
                break
            done
        )
    fi
}

# pass ls, pass show both will list directory if given a directory relpath.
# Call gpg directly in order to avoid this behavior.
decrypt() {
    local file
    file="${PASSWORD_STORE_DIR}/${1}.gpg"
    [[ ! -f $file ]] && err "No such entry \"$path\""
    # shellcheck disable=SC2086
    gpg $PASSWORD_STORE_GPG_OPTS --quiet --decrypt "$file"
}

path_or_find() {
    if [[ $# -ne 1 ]]; then
        # It thinks the $(find) below is find(1) instead of the shell function
        # declared above :thinking:
        #
        # shellcheck disable=SC2185
        find
    else
        echo "$1"
    fi
}

copyboth() {
    local entry username path
    path="$(path_or_find "$@")"
    printf 'Opening %s ... ' "$path"
    if ! entry="$(decrypt "$path")"; then
        err "Could not open entry \"$path\".  Giving up."
    fi
    echo 'success!'
    username=''
    for name in "${best_username[@]}"; do
        username="$(awk -F': ' "/$name/ { print \$2 }" <<< "$entry")"
        [[ $username ]] && break
    done
    [[ -z $username ]] && err "Did not find username, giving up."
    clip <<< "$username"
    echo -n 'COPIED Username.  Type RETURN to continue.'
    read -r
    awk 'NR == 1' <<< "$entry" | clip
    echo -n "COPIED Password.  Type RETURN to clear clipboard."
    read -r
}

default() {
    copyboth "$@"
}

show() {
    local entry path
    path="$(path_or_find "$@")"
    printf 'Opening %s ... ' "$path"
    if ! entry="$(decrypt "$path")"; then
        err "Could not open entry \"$path\".  Giving up."
    fi
    printf 'Ok.  Piping to a pager.\n'
    "$PAGER" <<< "$entry"
}

usage() {
    cat <<EOF
wpass show [entry]      # Show the entry with a pager
wpass copyboth [entry]  # Copy username and password to clipboard
wpass find              # Find an entry and print the path to stdout
wpass [--] [entry]      # Defaults to "wpass copyboth [entry]"
EOF
    exit
}

if [[ $# -lt 1 ]]; then
    cmd=default
else
    case "$1" in
        show|copyboth|find)
            cmd="$1"
            shift
            ;;
        usage|help|-h|--help)
            usage
            ;;
        --)
            shift
            cmd=default
            ;;
        *)
            cmd=default
            ;;
    esac
fi

"$cmd" "$@"
