#!/usr/bin/env racket
#lang racket

(require racket/pretty
         racket/hash
         racket/os
         tool

         basedir)

(current-basedir-program-name "nixt")

(define (main subcommand args)
  (info "subcommand=~v args=~v" subcommand args)
  (match subcommand
    ["provides"
     (define param (car args))
     (define path (or ; One of:
                   (file-exists? param)
                   (find-executable-path param)))
     (unless path
       (panic "\"~a\" is not a file nor does it not match a program in $PATH." param))
     ($ `(nix-store --query --outputs ,path))]
    ["rebuild" ($ '(sudo nixos-rebuild switch --show-trace))]
    ["upgrade" ($ '(sudo nixos-rebuild switch --upgrade --show-trace))]
    ["search" ($ `(nix search nixpkgs ,@args))]
    ["repl" ($ '(nix repl <nixpkgs>) #:input (current-input-port))]
    ["src"
     (define package (car args))
     (define output-dir
       (build-path
        (make-temporary-directory "nixt-src-~a" #:base-dir "/tmp")
        (format "~a-~a"
                package
                ;; Version:
                (values-second ($/string `(nix eval --raw ,(format "nixpkgs#~a.version" package)))))))
     (match (values-second ($/string `(nix-build <nixpkgs> -A ,(format "~a.src" package))))
       [(? directory-exists? src-dir)
        (copy-directory/files src-dir output-dir)]
       [(? file-exists? archive)
        (make-directory output-dir)
        ($ `(tar --strip-components=1 -C ,output-dir -xf ,archive))])
     (displayln (path->string output-dir))]
    ["nixpkgs"
     (match args
       [(list "root")
        ;; Get the root of the nixpkgs
        ($ '(nix-instantiate --eval -E <nixpkgs>))]
       [(list "src" pkg)
        ;; Get the .nix file where pkg is defined.
        (match (values-second ($/string `(nix eval --raw ,(format "nixpkgs#~a.meta.position" pkg))))
          [(pregexp #px"^(.*):(\\d+)$" (list _ filename line-number))
           ;; Seems like the line-number points to the meta.description
           ;; declaration... not terribly useful.  Just print the filename.
           (displayln filename)])])]
    ["help"
     (displayln
      #<<EOF
provides FILE       - what package provides this file (or program)
rebuild             - update system to reflect configuration files
upgrade             - do the above AND upgrade installed packages
search PACKAGE      - find packages
help                - this message
src PACKAGE         - get source code
nixpkgs root        - print out nixpkgs root
nixpkgs src PACKAGE - locate the .nix file PACKAGE is defined
EOF
      )]))

(*log-level* 'error)
(module+ main
  (tool-init!)
  (command-line
   #:multi
   [("-v" "--verbose") "Verbose" (*log-level* 'info)]
   [("-d" "--debug") "Debug" (*log-level* 'debug)]
   #:args (subcommand . args)
   #;
   (void (call-with-logging-to-actions (thunk (main subcommand args))))
   (void (main subcommand args))))
