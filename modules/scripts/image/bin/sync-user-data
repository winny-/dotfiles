#!/usr/bin/env racket
#|

# How to install deps

```
raco pkg install --auto dirname basedir shell-pipeline ansi-color
```

# What does this script do?

This synchronizes much of my user settings/data etc between machines.  Examples:

- Password database (can be done in place)
- Emacs configuration (requires Emacs restart)
- dotfiles (still needs manual intervention, run:
`~/p/dotfiles/tool install ~/p/dotfiles/tool modules/*`)
- Any user documents and work files (e.g. your code projects, psd files, whatever)

|#
#lang racket

(require racket/pretty
         racket/hash
         racket/os
         racket/logging

         basedir
         dirname
         shell/pipeline
         ansi-color)

(define-logger app)

(current-basedir-program-name "sync-user-data")

(define repos '(.password-store
                .emacs.d
                .config/awesome
                p/dotfiles
                p/nixos-configs))

(define ($ . command)
  (call-with-output-string
   (λ (output)
     (log-app-debug
      "$ ~a"
      ;; Build a shell-like representation of the pipeline.
      (string-join
       (map (λ (subcommand)
              (string-join
               (map (λ (arg)
                      (if (string-contains? (~a arg) " ")
                          (format "'~a'" arg)
                          (~a arg)))
                    subcommand)
               " "))
            command)
       " | "))
     (apply run-subprocess-pipeline
            command
            #:in null-redirect
            #:out output
            #:err stdout-redirect))))
(define (~ . elems)
  (apply build-path (expand-user-path "~") (map ~a elems)))

(define-syntax-rule (with-directory dir body ...)
  (parameterize ([current-directory dir])
    body ...))

(struct Task (thread channel))
(define/contract (async proc)
  (-> procedure? Task?)
  (define channel (make-channel))
  (define task (thread
                (thunk
                 (channel-put channel (proc)))))
  (Task task channel))
(define (await task)
  (match task
    [(struct* Task ([channel channel]))
     (channel-get channel)]))

(define (do-repos)
  (define tasks
    (for/list ([repo repos])
      (async
       (thunk
        (define path (~ repo))
        (list repo
              (with-directory path
                (string-append
                 ($ '(git pull -n))
                 ($ '(git push)))))))))
  (for ([task tasks])
    (match-define (list repo output)
      (await task))
    (log-app-info "> repo: ~a" repo)
    (log-app-info output)))

(define (do-unison)
  (log-app-info "> unison")
  ($ (append '(unison home)
             (flatten (for/list ([r repos])
                        `(-ignore ,(format "Path ~a" r)))))))

(define *is-home?* (make-parameter #f))
(define *verbosity* (make-parameter #f))

(define (main)
  (do-repos)
  (unless (*is-home?*)
    (do-unison))
  (void)) ; Nothing for top level to print for this expression.

(module+ main
  (command-line
   #:multi
   (("-v" "--verbose")
    "Verbosity."
    (*verbosity* #t))
   #:once-each
   (("-H" "--home")
    "You are the home primary storage, so you do not need to run unison."
    (*is-home?* #t))
   #:args ()

   (define (clean message)
     (string-trim (regexp-replace #rx"^[^:]+: " message "")
                  #:left? #f
                  #:repeat? #t))
   (define/match (log-it message)
     [((vector (and level (or 'fatal 'error 'warning)) message _ ...))
      (parameterize ([foreground-color 'red])
        (color-displayln (format "~a: ~a"
                                 (string-titlecase (~a level))
                                 (clean message))))]
     [((vector 'info message _ ...))
      (define m (clean message))
      (if (string-prefix? m ">")
          (parameterize ([foreground-color 'green])
            (color-displayln m))
          (displayln m))]
     [((vector 'debug message _ ...))
      (parameterize ([foreground-color 'yellow])
        (color-displayln (clean message)))]
     [(v) (raise-argument-error 'log-it "Don't know what to do with unmatched value ~a" v)])
   (with-intercepted-logging
     log-it
     main
     (if (*verbosity*) 'debug 'info)
     #:logger app-logger)))
